/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ViewObservation struct {

	// A description of the network view.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The Extensible attributes of the network container to be added/updated, as a map in JSON format
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ViewParameters struct {

	// A description of the network view.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// The Extensible attributes of the network container to be added/updated, as a map in JSON format
	// +kubebuilder:validation:Optional
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`
}

// ViewSpec defines the desired state of View
type ViewSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ViewParameters `json:"forProvider"`
}

// ViewStatus defines the observed state of View.
type ViewStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ViewObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// View is the Schema for the Views API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infoblox-nios}
type View struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ViewSpec   `json:"spec"`
	Status            ViewStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ViewList contains a list of Views
type ViewList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []View `json:"items"`
}

// Repository type metadata.
var (
	View_Kind             = "View"
	View_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: View_Kind}.String()
	View_KindAPIVersion   = View_Kind + "." + CRDGroupVersion.String()
	View_GroupVersionKind = CRDGroupVersion.WithKind(View_Kind)
)

func init() {
	SchemeBuilder.Register(&View{}, &ViewList{})
}
