/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CNAMEObservation struct {

	// The alias name in FQDN format.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The Canonical name in FQDN format.
	Canonical *string `json:"canonical,omitempty" tf:"canonical,omitempty"`

	// A description about CNAME record.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Dns View under which the zone has been created.
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	// The Extensible attributes of CNAME record, as a map in JSON format
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// TTL attribute value for the record.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type CNAMEParameters struct {

	// The alias name in FQDN format.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The Canonical name in FQDN format.
	// +kubebuilder:validation:Optional
	Canonical *string `json:"canonical,omitempty" tf:"canonical,omitempty"`

	// A description about CNAME record.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Dns View under which the zone has been created.
	// +kubebuilder:validation:Optional
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	// The Extensible attributes of CNAME record, as a map in JSON format
	// +kubebuilder:validation:Optional
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	// TTL attribute value for the record.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

// CNAMESpec defines the desired state of CNAME
type CNAMESpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CNAMEParameters `json:"forProvider"`
}

// CNAMEStatus defines the observed state of CNAME.
type CNAMEStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CNAMEObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CNAME is the Schema for the CNAMEs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infoblox-nios}
type CNAME struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.alias)",message="alias is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.canonical)",message="canonical is a required parameter"
	Spec   CNAMESpec   `json:"spec"`
	Status CNAMEStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CNAMEList contains a list of CNAMEs
type CNAMEList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CNAME `json:"items"`
}

// Repository type metadata.
var (
	CNAME_Kind             = "CNAME"
	CNAME_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CNAME_Kind}.String()
	CNAME_KindAPIVersion   = CNAME_Kind + "." + CRDGroupVersion.String()
	CNAME_GroupVersionKind = CRDGroupVersion.WithKind(CNAME_Kind)
)

func init() {
	SchemeBuilder.Register(&CNAME{}, &CNAMEList{})
}
