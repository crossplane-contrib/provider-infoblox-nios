/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AAAAObservation struct {

	// The network address in cidr format under which record has to be created.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// A description about AAAA record.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Dns View under which the zone has been created.
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	// The Extensible attributes of AAAA record to be added/updated, as a map in JSON format
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	// The name of the AAAA record in FQDN format.
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IPv6 address for record creation. Set the field with valid IP for static allocation. If to be dynamically allocated set cidr field
	IPv6Addr *string `json:"ipv6Addr,omitempty" tf:"ipv6_addr,omitempty"`

	// Network view name of NIOS server.
	NetworkView *string `json:"networkView,omitempty" tf:"network_view,omitempty"`

	// TTL attribute value for the record.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

type AAAAParameters struct {

	// The network address in cidr format under which record has to be created.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// A description about AAAA record.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Dns View under which the zone has been created.
	// +kubebuilder:validation:Optional
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	// The Extensible attributes of AAAA record to be added/updated, as a map in JSON format
	// +kubebuilder:validation:Optional
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	// The name of the AAAA record in FQDN format.
	// +kubebuilder:validation:Optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// IPv6 address for record creation. Set the field with valid IP for static allocation. If to be dynamically allocated set cidr field
	// +kubebuilder:validation:Optional
	IPv6Addr *string `json:"ipv6Addr,omitempty" tf:"ipv6_addr,omitempty"`

	// Network view name of NIOS server.
	// +kubebuilder:validation:Optional
	NetworkView *string `json:"networkView,omitempty" tf:"network_view,omitempty"`

	// TTL attribute value for the record.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`
}

// AAAASpec defines the desired state of AAAA
type AAAASpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AAAAParameters `json:"forProvider"`
}

// AAAAStatus defines the observed state of AAAA.
type AAAAStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AAAAObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AAAA is the Schema for the AAAAs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infoblox-nios}
type AAAA struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.fqdn)",message="fqdn is a required parameter"
	Spec   AAAASpec   `json:"spec"`
	Status AAAAStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AAAAList contains a list of AAAAs
type AAAAList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AAAA `json:"items"`
}

// Repository type metadata.
var (
	AAAA_Kind             = "AAAA"
	AAAA_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AAAA_Kind}.String()
	AAAA_KindAPIVersion   = AAAA_Kind + "." + CRDGroupVersion.String()
	AAAA_GroupVersionKind = CRDGroupVersion.WithKind(AAAA_Kind)
)

func init() {
	SchemeBuilder.Register(&AAAA{}, &AAAAList{})
}
