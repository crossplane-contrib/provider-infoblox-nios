/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SRVObservation struct {

	// Description of the SRV-record
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// DNS view which the zone does exist within
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	// Extensible attributes of the SRV-record to be added/updated, as a map in JSON format.
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Configures port number (0..65535) for this SRV-record.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Configures the priority (0..65535) for this SRV-record.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// TTL value for the SRV-record.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Provides service for domain name in the SRV-record.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Configures weight of the SRV-record, valid values are 0..65535.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type SRVParameters struct {

	// Description of the SRV-record
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// DNS view which the zone does exist within
	// +kubebuilder:validation:Optional
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	// Extensible attributes of the SRV-record to be added/updated, as a map in JSON format.
	// +kubebuilder:validation:Optional
	ExtAttrs *string `json:"extAttrs,omitempty" tf:"ext_attrs,omitempty"`

	// Configures port number (0..65535) for this SRV-record.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Configures the priority (0..65535) for this SRV-record.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// TTL value for the SRV-record.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// Provides service for domain name in the SRV-record.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Configures weight of the SRV-record, valid values are 0..65535.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// SRVSpec defines the desired state of SRV
type SRVSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SRVParameters `json:"forProvider"`
}

// SRVStatus defines the observed state of SRV.
type SRVStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SRVObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SRV is the Schema for the SRVs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,infoblox-nios}
type SRV struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.port)",message="port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.priority)",message="priority is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.target)",message="target is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.weight)",message="weight is a required parameter"
	Spec   SRVSpec   `json:"spec"`
	Status SRVStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SRVList contains a list of SRVs
type SRVList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SRV `json:"items"`
}

// Repository type metadata.
var (
	SRV_Kind             = "SRV"
	SRV_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SRV_Kind}.String()
	SRV_KindAPIVersion   = SRV_Kind + "." + CRDGroupVersion.String()
	SRV_GroupVersionKind = CRDGroupVersion.WithKind(SRV_Kind)
)

func init() {
	SchemeBuilder.Register(&SRV{}, &SRVList{})
}
